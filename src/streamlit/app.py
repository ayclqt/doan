#!/usr/bin/env python3
"""
·ª®ng d·ª•ng Streamlit cho Chatbot gi·ªõi thi·ªáu s·∫£n ph·∫©m
Phi√™n b·∫£n refactored v·ªõi auto-load conversations v√† pagination
"""

import asyncio
import json
import os
import time
from datetime import datetime, timedelta
from typing import Any, AsyncGenerator, Dict, List, Optional

import aiohttp
import streamlit as st
from dotenv import load_dotenv

__author__ = "L√¢m Quang Tr√≠"
__copyright__ = "Copyright 2025, L√¢m Quang Tr√≠"
__credits__ = ["L√¢m Quang Tr√≠"]

__maintainer__ = "L√¢m Quang Tr√≠"
__email__ = "quangtri.lam.9@gmail.com"
__status__ = "Development"

# ================== CONFIGURATION ==================
load_dotenv()
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000")
API_TIMEOUT = int(os.getenv("API_TIMEOUT", 300))
MAX_MESSAGE_LENGTH = int(os.getenv("MAX_MESSAGE_LENGTH", 1000))
SESSION_TIMEOUT_MINUTES = int(os.getenv("SESSION_TIMEOUT_MINUTES", 30))
CONVERSATIONS_PER_PAGE = 8

# ================== STREAMLIT CONFIG ==================
st.set_page_config(
    page_title="Chatbot Gi·ªõi Thi·ªáu S·∫£n Ph·∫©m",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded",
)

# ================== CSS STYLES ==================
st.write(
    """
<style>
.stApp > header {
    background-color: transparent;
}

.stApp {
    margin-top: -80px;
}

.stButton > button {
    width: 100%;
    margin-bottom: 0.5rem;
}


.typing-indicator {
    opacity: 0.7;
    font-style: italic;
    animation: pulse 1.5s infinite;
}

@keyframes pulse {
    0% { opacity: 0.7; }
    50% { opacity: 1; }
    100% { opacity: 0.7; }
}

.conversation-item {
    margin-bottom: 0.5rem;
    padding: 0.5rem;
    border-radius: 0.25rem;
    border: 1px solid #e0e0e0;
}

.error-message {
    color: #ff4444;
    background-color: #ffe6e6;
    padding: 0.5rem;
    border-radius: 0.25rem;
    margin: 0.5rem 0;
}

.success-message {
    color: #00aa00;
    background-color: #e6ffe6;
    padding: 0.5rem;
    border-radius: 0.25rem;
    margin: 0.5rem 0;
}
</style>
""",
    unsafe_allow_html=True,
)


# ================== UTILITY FUNCTIONS ==================
def run_async(coro):
    """Helper ƒë·ªÉ ch·∫°y async functions trong Streamlit"""
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            import concurrent.futures

            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(asyncio.run, coro)
                return future.result()
        else:
            return loop.run_until_complete(coro)
    except RuntimeError:
        return asyncio.run(coro)


def format_timestamp(timestamp: str) -> str:
    """Format timestamp cho hi·ªÉn th·ªã"""
    try:
        dt = datetime.fromisoformat(timestamp.replace("Z", "+00:00"))
        return dt.strftime("%H:%M:%S")
    except Exception:
        return ""


def safe_format_title(title: str, max_length: int = 25) -> str:
    """Format title an to√†n"""
    if not title:
        return "Cu·ªôc tr√≤ chuy·ªán"
    if len(title) > max_length:
        return title[:max_length] + "..."
    return title


def get_friendly_error_message(error: str) -> str:
    """Chuy·ªÉn ƒë·ªïi error message th√†nh th√¥ng b√°o th√¢n thi·ªán"""
    error_mappings = {
        "INVALID_TOKEN": "‚ùå Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá",
        "Invalid username or password": "‚ùå T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c",
        "Request timeout": "‚è≥ K·∫øt n·ªëi b·ªã timeout, vui l√≤ng th·ª≠ l·∫°i",
        "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API server": "üåê Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server",
        "Username already exists": "‚ùå T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i",
    }

    for key, friendly_msg in error_mappings.items():
        if key.lower() in error.lower():
            return friendly_msg

    return f"‚ùå {error}"


# ================== STATE MANAGEMENT ==================
class SessionState:
    """Qu·∫£n l√Ω session state"""

    @staticmethod
    def init():
        """Kh·ªüi t·∫°o session state"""
        default_values = {
            "authenticated": False,
            "user_info": None,
            "access_token": None,
            "current_conversation_id": None,
            "messages": [],
            "conversations": [],
            "conversations_page": 1,
            "has_more_conversations": True,
            "last_activity": datetime.now(),
            "loading_conversations": False,
        }

        for key, value in default_values.items():
            if key not in st.session_state:
                st.session_state[key] = value

    @staticmethod
    def is_valid() -> bool:
        """Ki·ªÉm tra session c√≥ h·ª£p l·ªá kh√¥ng"""
        if not st.session_state.get("authenticated", False):
            return False

        if not st.session_state.get("access_token"):
            return False

        last_activity = st.session_state.get("last_activity")
        if not last_activity:
            return False

        if datetime.now() - last_activity > timedelta(minutes=SESSION_TIMEOUT_MINUTES):
            return False

        return True

    @staticmethod
    def update_activity():
        """C·∫≠p nh·∫≠t th·ªùi gian ho·∫°t ƒë·ªông cu·ªëi"""
        st.session_state.last_activity = datetime.now()

    @staticmethod
    def clear():
        """X√≥a session state"""
        keys_to_clear = [
            "authenticated",
            "user_info",
            "access_token",
            "current_conversation_id",
            "messages",
            "conversations",
            "conversations_page",
            "has_more_conversations",
        ]
        for key in keys_to_clear:
            if key in st.session_state:
                del st.session_state[key]
        SessionState.init()


# ================== API CLIENT ==================
class APIClient:
    """Client ƒë·ªÉ g·ªçi API v·ªõi error handling t·ªët h∆°n"""

    @staticmethod
    async def make_request(
        method: str,
        endpoint: str,
        data: Optional[Dict] = None,
        token: Optional[str] = None,
        timeout: int = API_TIMEOUT,
    ) -> tuple[bool, Optional[Dict], str]:
        """Th·ª±c hi·ªán API request"""
        url = f"{API_BASE_URL.rstrip('/')}/{endpoint.lstrip('/')}"
        headers = {"Content-Type": "application/json"}

        if token:
            headers["Authorization"] = f"Bearer {token}"

        try:
            async with aiohttp.ClientSession(
                timeout=aiohttp.ClientTimeout(total=timeout)
            ) as session:
                async with session.request(
                    method, url, json=data, headers=headers
                ) as response:
                    if response.content_type == "application/json":
                        response_data = await response.json()
                    else:
                        response_data = {"message": await response.text()}

                    if response.status < 400:
                        return True, response_data, ""
                    else:
                        error_msg = response_data.get(
                            "detail", f"HTTP {response.status}"
                        )

                        if (
                            response.status in [401, 403]
                            or "token" in str(error_msg).lower()
                        ):
                            return False, response_data, "INVALID_TOKEN"

                        return False, response_data, error_msg

        except asyncio.TimeoutError:
            return False, None, "Request timeout"
        except aiohttp.ClientConnectorError:
            return False, None, "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API server"
        except Exception as e:
            return False, None, f"L·ªói k·∫øt n·ªëi: {str(e)}"

    @staticmethod
    async def stream_request(
        endpoint: str, data: Dict, token: str, timeout: int = API_TIMEOUT
    ) -> AsyncGenerator[Dict[str, Any], None]:
        """Th·ª±c hi·ªán streaming request"""
        url = f"{API_BASE_URL.rstrip('/')}/{endpoint.lstrip('/')}"
        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json",
            "Accept": "text/event-stream",
        }

        try:
            async with aiohttp.ClientSession(
                timeout=aiohttp.ClientTimeout(total=timeout)
            ) as session:
                async with session.post(url, json=data, headers=headers) as response:
                    if response.status == 200:
                        async for line in response.content:
                            line = line.decode("utf-8").strip()
                            if line.startswith("data: "):
                                try:
                                    chunk_data = json.loads(line[6:])
                                    yield chunk_data
                                except json.JSONDecodeError:
                                    continue
                    else:
                        error_text = await response.text()
                        if response.status in [401, 403]:
                            yield {"type": "error", "content": "INVALID_TOKEN"}
                        else:
                            yield {
                                "type": "error",
                                "content": f"HTTP {response.status}: {error_text}",
                            }

        except Exception as e:
            yield {"type": "error", "content": f"Stream error: {str(e)}"}


# ================== SERVICES ==================
class AuthService:
    """Service x·ª≠ l√Ω authentication"""

    @staticmethod
    async def login(username: str, password: str) -> tuple[bool, Optional[Dict], str]:
        """ƒêƒÉng nh·∫≠p"""
        if not username or len(username) < 3:
            return False, None, "T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±"

        if not password or len(password) < 6:
            return False, None, "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±"

        data = {"username": username, "password": password}
        success, response, error = await APIClient.make_request(
            "POST", "/auth/login", data
        )

        if success and response:
            return True, response, ""
        else:
            return False, None, error or "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i"

    @staticmethod
    async def register(
        username: str, password: str
    ) -> tuple[bool, Optional[Dict], str]:
        """ƒêƒÉng k√Ω"""
        if not username or len(username) < 3:
            return False, None, "T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±"

        if not password or len(password) < 6:
            return False, None, "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±"

        data = {"username": username, "password": password}
        success, response, error = await APIClient.make_request(
            "POST", "/auth/register", data
        )

        if success and response:
            return True, response, ""
        else:
            return False, None, error or "ƒêƒÉng k√Ω th·∫•t b·∫°i"


class ConversationService:
    """Service x·ª≠ l√Ω conversations v·ªõi pagination"""

    @staticmethod
    async def get_conversations(
        token: str, page: int = 1, limit: int = CONVERSATIONS_PER_PAGE
    ) -> tuple[bool, Optional[List], str]:
        """L·∫•y danh s√°ch cu·ªôc tr√≤ chuy·ªán v·ªõi pagination"""
        offset = (page - 1) * limit
        endpoint = f"/chat/conversations?limit={limit}&offset={offset}"

        success, data, error = await APIClient.make_request(
            "GET", endpoint, token=token
        )

        if success and isinstance(data, list):
            return True, data, ""
        elif error == "INVALID_TOKEN":
            return False, None, "INVALID_TOKEN"
        else:
            return False, None, error or "Kh√¥ng th·ªÉ t·∫£i danh s√°ch cu·ªôc tr√≤ chuy·ªán"

    @staticmethod
    async def get_conversation_history(
        token: str, conversation_id: str
    ) -> tuple[bool, Optional[Dict], str]:
        """L·∫•y l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán"""
        endpoint = f"/chat/conversations/{conversation_id}"
        success, data, error = await APIClient.make_request(
            "GET", endpoint, token=token
        )

        if success and data:
            return True, data, ""
        elif error == "INVALID_TOKEN":
            return False, None, "INVALID_TOKEN"
        else:
            return False, None, error or "Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán"


class ChatService:
    """Service x·ª≠ l√Ω chat - ƒë√£ lo·∫°i b·ªè include_search_info"""

    @staticmethod
    async def send_message_stream(
        message: str,
        token: str,
        conversation_id: Optional[str] = None,
    ) -> AsyncGenerator[Dict[str, Any], None]:
        """G·ª≠i tin nh·∫Øn v√† nh·∫≠n streaming response"""
        if not message or len(message.strip()) == 0:
            yield {"type": "error", "content": "Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"}
            return

        if len(message) > MAX_MESSAGE_LENGTH:
            yield {
                "type": "error",
                "content": f"Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c qu√° {MAX_MESSAGE_LENGTH} k√Ω t·ª±",
            }
            return

        # API s·∫Ω t·ª± ƒë·ªông s·ª≠ d·ª•ng include_search_info=False theo default
        data = {
            "message": message.strip(),
            "conversation_id": conversation_id,
            "stream": True,
        }

        async for chunk in APIClient.stream_request("/chat/", data, token):
            yield chunk


# ================== UI COMPONENTS ==================
class ConversationManager:
    """Qu·∫£n l√Ω conversations v·ªõi pagination"""

    @staticmethod
    async def load_conversations(page: int = 1) -> bool:
        """Load conversations cho trang ch·ªâ ƒë·ªãnh"""
        token = st.session_state.get("access_token")
        if not token or not SessionState.is_valid():
            return False

        st.session_state.loading_conversations = True

        try:
            success, conversations, error = await ConversationService.get_conversations(
                token, page, CONVERSATIONS_PER_PAGE
            )

            if success and conversations is not None:
                valid_conversations = [
                    conv
                    for conv in conversations
                    if isinstance(conv, dict) and conv.get("id")
                ]

                st.session_state.conversations = valid_conversations
                st.session_state.conversations_page = page
                st.session_state.has_more_conversations = (
                    len(valid_conversations) >= CONVERSATIONS_PER_PAGE
                )

                return True
            elif error == "INVALID_TOKEN":
                AuthHandler.handle_token_error()
                return False
            else:
                st.toast(f"L·ªói t·∫£i conversations: {error}", icon="‚ùå")
                return False

        except Exception as e:
            st.toast(f"L·ªói kh√¥ng mong mu·ªën: {str(e)}", icon="‚ùå")
            return False
        finally:
            st.session_state.loading_conversations = False

    @staticmethod
    def render_pagination():
        """Render pagination controls"""
        current_page = st.session_state.get("conversations_page", 1)
        has_more = st.session_state.get("has_more_conversations", False)

        col1, col2 = st.columns([1, 1])

        with col1:
            if st.button("‚óÄ", disabled=(current_page <= 1), key="prev_page"):
                if run_async(ConversationManager.load_conversations(current_page - 1)):
                    st.rerun()

        with col2:
            if st.button("‚ñ∂", disabled=not has_more, key="next_page"):
                if run_async(ConversationManager.load_conversations(current_page + 1)):
                    st.rerun()

    @staticmethod
    def render_conversation_list():
        """Render danh s√°ch conversations"""
        conversations = st.session_state.get("conversations", [])

        if not conversations:
            st.toast("Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán n√†o", icon="‚ÑπÔ∏è")
            return

        for conv in conversations:
            conv_title = safe_format_title(conv.get("title"), 25)
            conv_id = conv.get("id")
            message_count = conv.get("message_count", 0)

            if conv_id and st.button(
                f"üí¨ {conv_title} ({message_count})", key=f"conv_{conv_id}"
            ):
                ConversationManager.load_conversation_history(conv_id)

    @staticmethod
    def load_conversation_history(conv_id: str):
        """Load l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán"""
        token = st.session_state.get("access_token")
        if not token or not SessionState.is_valid():
            AuthHandler.handle_token_error()
            return

        with st.spinner("üìú ƒêang t·∫£i l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán..."):
            success, history, error = run_async(
                ConversationService.get_conversation_history(token, conv_id)
            )

            if success and history:
                st.session_state.current_conversation_id = conv_id
                st.session_state.messages = []

                messages = history.get("messages", [])
                for msg in messages:
                    if msg.get("message") and msg.get("response"):
                        MessageHandler.add_message("user", msg["message"])
                        MessageHandler.add_message("assistant", msg["response"])

                st.toast(f"ƒê√£ t·∫£i l·ªãch s·ª≠ ({len(messages)} tin nh·∫Øn)", icon="‚úÖ")
                st.rerun()
            elif error == "INVALID_TOKEN":
                AuthHandler.handle_token_error()
            else:
                st.toast("L·ªói t·∫£i l·ªãch s·ª≠: " + error, icon="‚ùå")


class MessageHandler:
    """X·ª≠ l√Ω messages"""

    @staticmethod
    def add_message(role: str, content: str):
        """Th√™m tin nh·∫Øn v√†o session"""
        if "messages" not in st.session_state:
            st.session_state.messages = []

        st.session_state.messages.append(
            {"role": role, "content": content, "timestamp": datetime.now().isoformat()}
        )

    @staticmethod
    def clear_conversation():
        """X√≥a cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i"""
        st.session_state.messages = []
        st.session_state.current_conversation_id = None

    @staticmethod
    def render_messages():
        """Render danh s√°ch messages"""
        messages = st.session_state.get("messages", [])
        for message in messages:
            with st.chat_message(message["role"]):
                st.write(message["content"], unsafe_allow_html=True)
                if message.get("timestamp"):
                    st.caption(f"‚è∞ {format_timestamp(message['timestamp'])}")


class AuthHandler:
    """X·ª≠ l√Ω authentication"""

    @staticmethod
    def handle_token_error():
        """X·ª≠ l√Ω l·ªói token"""
        st.toast("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n", icon="‚ùå")
        st.toast("B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p", icon="‚ÑπÔ∏è")

        for i in range(3, 0, -1):
            st.toast(f"Chuy·ªÉn h∆∞·ªõng sau {i} gi√¢y...", icon="‚è≥")
            time.sleep(1)

        SessionState.clear()
        st.rerun()

    @staticmethod
    async def auto_load_conversations_on_login():
        """T·ª± ƒë·ªông load conversations sau khi ƒëƒÉng nh·∫≠p"""
        if st.session_state.get("authenticated") and not st.session_state.get(
            "conversations"
        ):
            await ConversationManager.load_conversations(1)


# ================== UI PAGES ==================
def login_page():
    """Trang ƒëƒÉng nh·∫≠p"""
    st.title("ü§ñ Chatbot Gi·ªõi Thi·ªáu S·∫£n Ph·∫©m")
    st.write("---")

    tab1, tab2 = st.tabs(["ƒêƒÉng Nh·∫≠p", "ƒêƒÉng K√Ω"])

    with tab1:
        st.header("ƒêƒÉng Nh·∫≠p")
        with st.form("login_form"):
            username = st.text_input(
                "T√™n ƒëƒÉng nh·∫≠p", placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p..."
            )
            password = st.text_input(
                "M·∫≠t kh·∫©u", type="password", placeholder="Nh·∫≠p m·∫≠t kh·∫©u..."
            )
            submit_button = st.form_submit_button("üîê ƒêƒÉng Nh·∫≠p", type="primary")

            if submit_button:
                if username and password:
                    with st.spinner("üîê ƒêang ƒëƒÉng nh·∫≠p..."):
                        success, result, error = run_async(
                            AuthService.login(username, password)
                        )

                    if success and result:
                        st.session_state.authenticated = True
                        st.session_state.access_token = result["access_token"]
                        st.session_state.user_info = {
                            "user_id": result["user_id"],
                            "username": result["username"],
                        }
                        SessionState.update_activity()
                        st.toast("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", icon="‚úÖ")

                        # Auto-load conversations
                        run_async(AuthHandler.auto_load_conversations_on_login())

                        time.sleep(1)
                        st.rerun()
                    else:
                        friendly_error = get_friendly_error_message(error)
                        # Remove duplicate icon from error message
                        clean_error = (
                            friendly_error.replace("‚ùå ", "")
                            if friendly_error.startswith("‚ùå ")
                            else friendly_error
                        )
                        st.toast(clean_error, icon="‚ùå")
                        if (
                            "timeout" in error.lower()
                            or "k·∫øt n·ªëi" in friendly_error.lower()
                        ):
                            if st.button("üîÑ Th·ª≠ l·∫°i", key="login_retry"):
                                st.rerun()
                else:
                    st.toast("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", icon="‚ùå")

    with tab2:
        st.header("ƒêƒÉng K√Ω")
        with st.form("register_form"):
            reg_username = st.text_input("T√™n ƒëƒÉng nh·∫≠p", key="reg_username")
            reg_password = st.text_input(
                "M·∫≠t kh·∫©u", type="password", key="reg_password"
            )
            reg_confirm_password = st.text_input("X√°c nh·∫≠n m·∫≠t kh·∫©u", type="password")
            register_button = st.form_submit_button("üìù ƒêƒÉng K√Ω", type="secondary")

            if register_button:
                if reg_username and reg_password and reg_confirm_password:
                    if reg_password != reg_confirm_password:
                        st.toast("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!", icon="‚ùå")
                    else:
                        with st.spinner("üìù ƒêang ƒëƒÉng k√Ω..."):
                            success, result, error = run_async(
                                AuthService.register(reg_username, reg_password)
                            )

                            if success:
                                st.toast(
                                    "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.", icon="‚úÖ"
                                )
                            else:
                                friendly_error = get_friendly_error_message(error)
                                clean_error = (
                                    friendly_error.replace("‚ùå ", "")
                                    if friendly_error.startswith("‚ùå ")
                                    else friendly_error
                                )
                                st.toast(clean_error, icon="‚ùå")
                                if (
                                    "timeout" in error.lower()
                                    or "k·∫øt n·ªëi" in friendly_error.lower()
                                ):
                                    if st.button("üîÑ Th·ª≠ l·∫°i", key="register_retry"):
                                        st.rerun()
                else:
                    st.toast("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", icon="‚ùå")


def sidebar():
    """Sidebar v·ªõi th√¥ng tin user v√† conversations"""
    with st.sidebar:
        # User info
        user_info = st.session_state.get("user_info", {})
        st.header(f"üëã Xin ch√†o, {user_info.get('username', 'User')}")

        # Logout button
        if st.button("üö™ ƒêƒÉng xu·∫•t", type="secondary"):
            SessionState.clear()
            st.toast("üëã ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!", icon="‚úÖ")
            time.sleep(1)
            st.rerun()

        st.write("---")

        # New conversation
        if st.button("üí¨ Cu·ªôc tr√≤ chuy·ªán m·ªõi", type="primary"):
            MessageHandler.clear_conversation()
            st.toast("ƒê√£ t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi!", icon="‚úÖ")
            st.rerun()

        # Conversations section
        st.subheader("üìù L·ªãch s·ª≠ tr√≤ chuy·ªán")

        # Conversations list
        if st.session_state.get("loading_conversations", False):
            st.toast("‚è≥ ƒêang t·∫£i danh s√°ch cu·ªôc tr√≤ chuy·ªán...", icon="‚è≥")
        else:
            ConversationManager.render_conversation_list()

        # Pagination controls (moved below conversation list)
        ConversationManager.render_pagination()

        # Delete conversation button (moved outside of settings)
        if st.button("üóëÔ∏è X√≥a cu·ªôc tr√≤ chuy·ªán", type="secondary"):
            MessageHandler.clear_conversation()
            st.toast("ƒê√£ x√≥a cu·ªôc tr√≤ chuy·ªán", icon="‚úÖ")
            st.rerun()

        # Stats
        messages = st.session_state.get("messages", [])
        if messages:
            st.caption(f"üìä Cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i: {len(messages)} tin nh·∫Øn")


def chat_interface():
    """Giao di·ªán chat ch√≠nh - ƒë√£ lo·∫°i b·ªè search settings"""
    st.title("ü§ñ Chatbot T∆∞ V·∫•n S·∫£n Ph·∫©m")
    st.write("H·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ s·∫£n ph·∫©m ƒëi·ªán t·ª≠!")

    # Check session validity
    if not SessionState.is_valid():
        st.toast("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.", icon="‚ö†Ô∏è")
        SessionState.clear()
        st.rerun()

    # Update activity
    SessionState.update_activity()

    # Display messages
    MessageHandler.render_messages()

    # Chat input
    if prompt := st.chat_input("üí¨ Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
        # Add user message
        MessageHandler.add_message("user", prompt)

        # Display user message
        with st.chat_message("user"):
            st.write(prompt)

        # Get bot response
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            full_response = ""

            try:
                token = st.session_state.get("access_token")
                if not token or not SessionState.is_valid():
                    st.toast(
                        "Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.", icon="‚ùå"
                    )
                    AuthHandler.handle_token_error()
                    return

                status_container = st.status(
                    "ü§î ƒêang ph√¢n t√≠ch c√¢u h·ªèi...", expanded=True
                )

                try:

                    async def process_stream():
                        nonlocal full_response
                        first_chunk_received = False

                        with status_container:
                            async for chunk in ChatService.send_message_stream(
                                prompt,
                                token,
                                st.session_state.get("current_conversation_id"),
                            ):
                                if chunk["type"] == "start":
                                    st.session_state.current_conversation_id = (
                                        chunk.get("conversation_id")
                                    )

                                elif chunk["type"] == "chunk":
                                    content = chunk.get("content", "")
                                    full_response += content

                                    if not first_chunk_received:
                                        status_container.update(
                                            label="üí≠ ƒêang x·ª≠ l√Ω...",
                                            state="running",
                                            expanded=False,
                                        )
                                        first_chunk_received = True

                                    message_placeholder.write(full_response + " ‚ñå")

                                elif chunk["type"] == "end":
                                    message_placeholder.write(full_response)
                                    status_container.update(
                                        label="‚úÖ Ho√†n th√†nh!", state="complete"
                                    )

                                elif chunk["type"] == "error":
                                    error_content = chunk.get(
                                        "content", "Unknown error"
                                    )
                                    status_container.update(
                                        label="‚ùå C√≥ l·ªói x·∫£y ra", state="error"
                                    )
                                    if error_content == "INVALID_TOKEN":
                                        st.toast(
                                            "Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n.", icon="‚ùå"
                                        )
                                        AuthHandler.handle_token_error()
                                        return
                                    else:
                                        st.toast(f"L·ªói: {error_content}", icon="‚ùå")
                                        return

                    run_async(process_stream())

                    # Add response to history
                    if full_response:
                        MessageHandler.add_message("assistant", full_response)

                except Exception as stream_error:
                    status_container.update(label="‚ùå L·ªói k·∫øt n·ªëi", state="error")
                    st.toast(f"L·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi: {str(stream_error)}", icon="‚ùå")

            except Exception as e:
                st.toast(f"L·ªói khi g·ª≠i tin nh·∫Øn: {str(e)}", icon="‚ùå")


def main():
    """H√†m main"""
    # Initialize session state
    SessionState.init()

    # Main app logic
    if not st.session_state.get("authenticated", False):
        login_page()
    else:
        # Layout with sidebar
        sidebar()

        # Main chat interface
        chat_interface()

        # Footer
        st.write("---")
        st.write(
            "<div style='text-align: center; color: #666; font-size: 0.8em;'>"
            "ü§ñ Chatbot Gi·ªõi Thi·ªáu S·∫£n Ph·∫©m - Powered by LLM & Vector Search"
            "</div>",
            unsafe_allow_html=True,
        )


if __name__ == "__main__":
    main()
